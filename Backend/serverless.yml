service: aws-python

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: ${opt:region,'us-east-1'}

custom:
  cognitoAuthorizerArn : arn:aws:cognito-idp:us-east-1:344089725894:userpool/us-east-1_LbXxcBWw4
  pythonRequirements:
    dockerizePip: non-linux
functions:
  # child
  GetChildData:
    handler: lambdas/children/get_child_data_lambda.get_child_data
    role: ChildrenRole
    events:
      - http:
          path: children-mock
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
    package:
      patterns:
        - 'lambdas/children/**'
  AddChildData:
    handler: lambdas/children/add_child_data_lambda.add_child_data
    role: ChildrenRole
    events:
      - http:
          path: children-mock
          method: post
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
    package:
      patterns:
        - 'lambdas/children/**'
  # teacher
  GetTeacherData:
    handler: lambdas/teacher/get_teacher_data_lambda.get_teacher_data
    role: TeacherRole
    events:
      - http:
          path: teacher-mock
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
    package:
      patterns:
        - 'lambdas/teacher/**'
  AddTeacherData:
    handler: lambdas/teacher/add_teacher_data_lambda.add_teacher_data
    role: TeacherRole
    events:
      - http:
          path: teacher-mock
          method: post
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
    package:
      patterns:
        - 'lambdas/teacher/**'
  # kindergarten
  GetKindergartenDataMock:
    handler: lambdas/kindergarten/get_kindergarten_data_lambda_mock.get_kindergarten_data
    role: KindergartenRole
    events:
      - http:
          path: kindergarten-mock
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
    package:
      patterns:
        - 'lambdas/kindergarten/**'
  GetKindergartenData:
    handler: lambdas/kindergarten/get_kindergarten_data_lambda.get_kindergarten_data
    role: KindergartenRole
    events:
      - http:
          path: kindergarten
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoAuthorizerArn}

    package:
      patterns:
        - 'lambdas/kindergarten/**'

  GetAttendanceData:
    handler: lambdas/attendance/get_attendance_data_lambda.get_attendance_data
    role: AttendanceRole
    events:
      - http:
          path: attendance-mock
          method: get
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
    package:
      patterns:
        - 'lambdas/attendance/**'
  AddAttendanceData:
    handler: lambdas/attendance/add_attendance_data_lambda.add_attendance_data
    role: AttendanceRole
    events:
      - http:
          path: attendance-mock
          method: post
          integration: lambda
          cors: true
          request:
            template: ${file(./request_apigateway.yml)}
          response: ${file(./response_apigateway.yml)}
    package:
      patterns:
        - 'lambdas/attendance/**'
plugins:
  - serverless-dependson-plugin
  - serverless-python-requirements
  - serverless-plugin-stage-variables
resources:
  Resources:
    ChildrenRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "*"
                  Resource: "*"
    TeacherRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
    KindergartenRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
    AttendanceRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"

    #dynamodb
    KindergartenTeacherTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: "KindergartenTeacherTable"
    KindergartenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: "KindergartenTable"
    KindergartenChildTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: "KindergartenChildTable"
    AttendanceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "child_id"
            AttributeType: "S"
          - AttributeName: "date"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "child_id"
            KeyType: "HASH"
          - AttributeName: "date"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: "AttendanceTable"


package:
  patterns:
    - '!node_modules/**'
    - '!lambdas/**'
    - '!tests/**'
    - 'lambdas/__init__.py'
    - 'venv/**'
  individually: true


